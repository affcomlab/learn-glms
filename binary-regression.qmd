---
title: "Binary Regression"
format: html
---

We start our first look at GLMs with binary regression. Here, we consider when binary regression is more appropriate than a regular (general linear) regression. We will also fit toy data and interpret the results.

## Data Demonstration 
The data for this chapter consists of some records of passengers on the Titanic. The question we will ask and answer with binomial regression is if the amount of fare contributed in some way to the survival of passengers. Since `survived` is a binary outcome (yes or no), this relationship is best assessed with binary regression. 

-   Data: <a href="./titanic.csv" download> titanic.csv </a>

| Variable    | Description                     |     Values | Measurement |
|-------------|:--------------------------------|-----------:|:-----------:|
| `sex`       | Male or Female                  | Characters |   Nominal   |
| `age`    | Age of Passenger |    Double |    Scale    |
| `class`    | Category of Passenger Accommodation         |   Characters |   Nominal   |
| `fare`   | Cost of fare    |    Double |    Scale    |
| `survived` | "Yes" or "No" if survived   |    Characters |    Nominal    |


## Loading the Packages and Reading in Data

```{r, warning = FALSE, message=FALSE}
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)

## Read in data from file
titanic_data <- read_csv("titanic.csv")

```

## Prepare Data / Exploratory Data Analysis

In order to use `survived` in our analysis, we need to re-code the outcomes as integer numbers. Here, we will use the `mutate()` function from the `dplyr` package (which is a package that also came with `tidyverse`) to accomplish this. 

```{r}
## Prepare the data for analysis
titanic2 <- 
  titanic_data |> 
  mutate(
    survived_b = case_match(
      survived, 
      "no" ~ 0,
      "yes" ~ 1
    )
  )
```

::: {.callout-tip title="mutate() and data-wrangling"}
`mutate()` is a function from `dplyr` that adds a column to the dataframe (the object that holds the data). This isn't the only way to accomplish our goal of re-coding `survived`, but it is a fairly elegant, easy, and straightforward way to do so. The trick is to remember that `mutate()` adds a column to the existing dataframe with the same number of rows as the existing dataframe. 

Our choice of data-wrangling functions are open to reprisal because there are many ways in data analysis and programming to do the same thing. 
:::


# Fitting the Binary Regression Model 

```{r}
fit2 <- glm(
  formula = survived_b ~ fare, 
  family = binomial(link = "logit"), 
  data = titanic2
)

## Print parameters in logit (i.e., log-odds) units
model_parameters(fit2) |> print_md()
```

