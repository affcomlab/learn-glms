## Read in data from file
titanic_data <- read_csv("titanic.csv")
titanic_data
mytheme <- theme_bw(
base_size = 12
)
## Prepare the data for analysis
titanic2 <-
titanic_data |>
mutate(
survived_b = case_match(
survived,
"no" ~ 0,
"yes" ~ 1
)
)
titanic2 #print
ggplot(titanic2, aes(x = fare, y = survived_b)) +
geom_point() + mytheme
ggplot(titanic2, aes(x = fare, y = survived)) +
geom_boxplot() + mytheme
#simple linear regression
fitlm <- lm(
formula = survived_b ~ fare,
data = titanic2
)
model_parameters(fit1) |> print_md()
predict_response(fit1, terms = "fare") |> plot(show_data = TRUE)
check_model(fitlm)
check_model(fit1)
#simple linear regression
fitlm <- lm(
formula = survived_b ~ fare,
data = titanic2
)
model_parameters(fitlm) |> print_md()
p_heads <- 60/(60+40)
p_heads
o_heads <- p_heads/(1 - p_heads)
o_heads
log_heads <- log(o_heads)
log_heads
exp(-0.47)
?case_match
??case_match
??recode
recode
?recode
??recode
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
titanic_data <- read_csv("titanic.csv")
titanic_data
mytheme <- theme_bw(
base_size = 12
)
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
titanic_data <- read_csv("titanic.csv")
titanic_data
## Prepare the data for analysis
titanic2 <-
titanic_data |>
mutate(
survived_b = case_match(
survived,
"no" ~ 0,
"yes" ~ 1
)
)
titanic2 #print
View(titanic2)
titanic_data$survived2 <- titanic_data$survived
View(titanic_data)
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
titanic_data <- read_csv("titanic.csv")
titanic_data
## Prepare the data for analysis
titanic2 <-
titanic_data |>
mutate(
survived_b = case_match(
survived,
"no" ~ 0,
"yes" ~ 1
)
)
titanic2 #print
View(titanic_data)
df <- titanic_data %>% select(c(fare,survived))
View(df)
model_parameters(fit1, exponentiate = TRUE) |> print_md()
fit1 <- glm(
formula = survived_b ~ 1,
family = binomial(link = "logit"),
data = titanic2
)
model_parameters(fit1) |> print_md()
model_parameters(fit1, exponentiate = TRUE) |> print_md()
1-0.63
predict_response(fit1) |> plot(show_data = TRUE)
depression <- read_csv("depression.csv")
View(depression)
depression2 <-
depression |>
mutate(
phq9_max = 27, # maximum possible score (can be same or different per row)
phq9_p = phq9 / phq9_max # proportion of maximum possible score per row
) |>
print()
fit2 <- glm(
formula = phq9_p ~ income_ratio,
family = binomial(link = "logit"),
weights = phq9_max,
data = depression2
)
summary(fit2)
lmod <- glm(
formula = cbind(phq9,phq9_max) ~ income_ratio,
family = binomial(link="logit"),
data = depression2
)
summary(lmod)
library(faraway)
data(orings)
force(orings)
lmod <- glm(
formula = cbind(phq9,27-phq9) ~ income_ratio,
family = binomial(link="logit"),
data = depression2
)
summary(fit2)
summary(lmod)
View(depression2)
plot(damage/6 ~ temp, orings, xlim=c(25,85), ylim = c(0,1), xlab=" ↪→ Temperature", ylab="Prob of damage")
View(depression2)
View(depression2)
View(depression)
View(depression)
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
depression <- read_csv("depression.csv")
depression
View(depression)
View(depression2)
depression2 <-
depression |>
mutate(
phq9_max = 27, # maximum possible score (can be same or different per row)
phq9_p = phq9 / phq9_max # proportion of maximum possible score per row
) |>
depression2
depression2 <-
depression |>
mutate(
phq9_max = 27, # maximum possible score (can be same or different per row)
phq9_p = phq9 / phq9_max # proportion of maximum possible score per row
)
depression2
hist(depression2$phq9_p)
View(depression)
View(depression)
View(depression)
ggplot(depression2, aes(x = income_ratio, y = phq9_p)) +
geom_point() + mytheme
mytheme <- theme_bw(
base_size = 12
)
ggplot(depression2, aes(x = income_ratio, y = phq9_p)) +
geom_point() + mytheme
fit2 <- glm(
formula = phq9_p ~ income_ratio,
family = binomial(link = "logit"),
weights = phq9_max,
data = depression2
)
model_parameters(fit2)
ggplot(depression2, aes(x = income_ratio, y = phq9_p)) +
geom_point() + mytheme
model_parameters(fit2, exponentiate = TRUE) |> print_md()
hist(depression2$phq9_p)
hist(depression2$phq9)
View(depression2)
mean(3, 5, 5, 7, 5)
country <- c("USA", "China", "Japan", "Germany", "India")
n <- nchar(country)
mean(n)
mean(c(3,5,5,7,5))
mean(3,5,5,7,5)
mean(3)
?mean
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
depression <- read_csv("depression.csv")
depression
mytheme <- theme_bw(
base_size = 12
)
depression2 <-
depression |>
mutate(
phq9_max = 27, # maximum possible score (can be same or different per row)
phq9_p = phq9 / phq9_max # proportion of maximum possible score per row
)
depression2
ggplot(depression2, aes(x = income_ratio, y = phq9_p)) +
geom_point()
ggplot(depression2, aes(x = income_ratio, y = phq9_p)) +
geom_point() + mytheme()
ggplot(depression2, aes(x = income_ratio, y = phq9_p)) +
geom_point() + mytheme
fit2 <- glm(
formula = phq9_p ~ income_ratio,
family = binomial(link = "logit"),
weights = phq9_max,
data = depression2
)
model_parameters(fit2) |> print_md()
model_parameters(fit2, exponentiate = TRUE) |> print_md()
predict_response(fit2, terms = "fare") |> plot(show_data = TRUE)
predict_response(fit2, terms = "income_ratio") |> plot(show_data = TRUE)
View(depression2)
qt(0.95, 9)
1.3  (1.833113*0.4229)
1.3 - (1.833113*0.4229)
View(depression)
View(depression2)
View(depression2)
View(depression2)
View(depression2)
fit3 <- glm(
formula = phq9_p ~ income_ratio + age,
family = binomial(link = "logit"),
weights = phq9_max,
data = depression2
)
## Print parameters in logit (i.e., log-odds) units
model_parameters(fit3) |> print_md()
View(fit3)
View(depression2)
## Print parameters in odds
model_parameters(fit3, exponentiate = TRUE) |> print_md()
predict_response(fit3, terms = "income_ratio") |> plot(show_data = TRUE)
predict_response(fit3, terms = "age") |> plot(show_data = TRUE)
View(fit3)
View(depression2)
View(fit3)
View(depression2)
depression2$gender <- factor(depression2$gender, levels = c("Female","Male"))
View(depression2)
View(depression2)
View(depression2)
titanic2$class <- factor(titanic2$class, levels =c("1st","2nd","3rd"))
depression2$gender <- factor(depression2$gender, levels = c("Female","Male")) #change to factor
fit4 <- glm(
formula = phq9_p ~ gender,
family = binomial(link = "logit"),
weights = phq9_max,
data = depression2
)
model_parameters(fit4) |> print_md()
gmeans1 <- estimate_means(fit4, by = c("gender"))
gmeans1 |> print_md()
model_parameters(fit4, exponentiate = TRUE) |> print_md()
1-0.18
1-0.59
predict_response(fit4, terms = "gender") |> plot(show_data = TRUE)
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
titanic_data <- read_csv("titanic.csv")
titanic_data
titanic2$class <- factor(titanic2$class, levels =c("1st","2nd","3rd"))
## Prepare the data for analysis
titanic2 <-
titanic_data |>
mutate(
survived_b = case_match(
survived,
"no" ~ 0,
"yes" ~ 1
)
)
titanic2 #print
fit5 <- glm(
formula = survived_b ~ class + age,
family = binomial(link = "logit"),
data = titanic2
)
model_parameters(fit5) |> print_md()
titanic2$class <- factor(titanic2$class, levels =c("1st","2nd","3rd"))
fit4 <- glm(
formula = survived_b ~ class,
family = binomial(link = "logit"),
data = titanic2
)
model_parameters(fit4) |> print_md()
View(depression2)
fit5 <- glm(
formula = phq9_p ~ income_ratio + age,
family = binomial(link = "logit"),
weights = phq9_max,
data = depression2
)
model_parameters(fit5) |> print_md()
fit5 <- glm(
formula = phq9_p ~ income_ratio + gender,
family = binomial(link = "logit"),
weights = phq9_max,
data = depression2
)
model_parameters(fit5) |> print_md()
fit5 <- glm(
formula = phq9_p ~ gender + income_ratio,
family = binomial(link = "logit"),
weights = phq9_max,
data = depression2
)
model_parameters(fit5) |> print_md()
model_parameters(fit5, exponentiate = TRUE) |> print_md()
model_parameters(fit5, exponentiate = TRUE) |> print_md()
?clm
install.packages("ordinal")
library(ordinal)
?clm
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
depression <- read_csv("depression_checklist.csv")
depression
View(depression)
rm depression
clear depression
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
depression <- read_csv("depression_checklist.csv")
depression
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
depression <- read_csv("depression_checklist.csv")
depression
View(depression)
View(depression)
View(depression)
View(depression)
View(depression)
View(depression)
## Load packages
library(tidyverse)
library(easystats)
library(ggeffects)
library(DHARMa)
library(qqplotr)
## Read in data from file
depression <- read_csv("depression_checklist.csv")
depression
# depression2 <-
#   depression |>
#   mutate(
#     phq9_max = 27, # maximum possible score (can be same or different per row)
#     phq9_p = phq9 / phq9_max # proportion of maximum possible score per row
#   )
depression2 <-
depression |>
mutate(
dcl_max = 9,
dcl_sum = rowSums(pick(dcl_1:dcl_9)),
)
depression2
View(depression2)
ggplot(depression2, aes(x = support, y = dcl9_p)) +
geom_point() + mytheme
mytheme <- theme_bw(
base_size = 12
)
ggplot(depression2, aes(x = support, y = dcl9_p)) +
geom_point() + mytheme
# depression2 <-
#   depression |>
#   mutate(
#     phq9_max = 27, # maximum possible score (can be same or different per row)
#     phq9_p = phq9 / phq9_max # proportion of maximum possible score per row
#   )
depression2 <-
depression |>
mutate(
dcl_max = 9,
dcl_sum = rowSums(pick(dcl_1:dcl_9)),
dcl9_p = dcl_sum / dcl_max
)
depression2
ggplot(depression2, aes(x = support, y = dcl9_p)) +
geom_point() + mytheme
fit2 <- glm(
formula = dcl9_p ~ support,
family = binomial(link = "logit"),
weights = dcl9_max,
data = depression2
)
fit2 <- glm(
formula = dcl9_p ~ support,
family = binomial(link = "logit"),
weights = dcl_max,
data = depression2
)
model_parameters(fit2) |> print_md()
View(depression2)
model_parameters(fit2, exponentiate = TRUE) |> print_md()
predict_response(fit2, terms = "income_ratio") |> plot(show_data = TRUE)
predict_response(fit2, terms = "support") |> plot(show_data = TRUE)
View(depression2)
View(depression2)
?factor
depression2$gender <- factor(depression2$gender, levels = c(0,1), labels = c("Female","Male")) #change to factor
fit4 <- glm(
formula = dcl9_p ~ gender,
family = binomial(link = "logit"),
weights = dcl_max,
data = depression2
)
model_parameters(fit4) |> print_md()
View(depression2)
View(depression2)
gmeans1 <- estimate_means(fit4, by = c("gender"))
gmeans1 |> print_md()
model_parameters(fit4, exponentiate = TRUE) |> print_md()
library(tidyverse)
library(easystats)
professors <- read_csv("salaries.csv")
#one sample t-test (long way)
mu_0 <- 100 # amounts to $100,000
xbar <- mean(professors$salary)
n <- length(professors$salary)
s <- sd(professors$salary)
se <- s / sqrt(n)
t_xbar <- (xbar - mu_0) / se
t_crit <- qt(0.975, df = n - 1) #one sided t-score
#since t_xbar > t_crit, reject null
#easystats way
fit1 <- t.test(professors$salary, mu = 100)
fit1
View(fit1)
View(professors)
professors %>% c_across("yrs.since.phd","salary")
professors %>% sum(c_across("yrs.since.phd","salary"))
professors %>% sum(c_across(c("yrs.since.phd","salary")))
d <- mtcars
View(d)
professors %>% rowwise() %>% mutate( sumed = sum(c_across(c("yrs.since.phd","salary"))))
View(d)
d %>% summarize(pat = var(c_across("vs","am","gear","carb")))
d %>% summarize(pat = var(c_across(c("vs","am","gear","carb"))))
d %>% summarize(pat = var(c_across(c("vs"))))
var(d$vs)
d %>% summarize(pat = var(c_across(c("vs","am"))))
var(d$am)
var(d$am) + var(d$vs)
var(d$am,d$vs)
het <- d[,8]
het <- c(d[,8],d[,9])
het
het <- c(d[,8],d[,10])
het
var(het)
d %>% summarize(pat = var(c_across(c("vs",gear"))))
)
)
d %>% summarize(pat = var(c_across(c("vs","gear"))))
